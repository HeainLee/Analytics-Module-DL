"""
Django settings for smartcity project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*s(w5a^7&ddnxyf1evre0v-9pv4=&9g0w!n=%uz5ec^1n55tko'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'API',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smartcity.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartcity.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'analytics_module_local', # 임시 테스트용
        'USER': 'smartcity',
        'PASSWORD': 'smartcity',
        'HOST': '10.1.22.2',
        'PORT': '5432',
    }
}



# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {

  'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
  'EXCEPTION_HANDLER': 'API.services.utils.custom_response.custom_exception_handler'
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/result/' #URL을 통해 첨부파일에 접근할 수 있는 URL경로 
MEDIA_ROOT = os.path.join(BASE_DIR, 'result') #파일이 저장될 경로
# session에 PickleSerializer로 저장하기 위한 장고 설정
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
# Django 프레임워크에서 세션 타임아웃을 설정하는 옵션
SESSION_COOKIE_AGE = 1800 #초 단위(30분)
SESSION_SAVE_EVERY_REQUEST = True 
# 사용자가 리퀘스트를 서버로 날릴 때마다 세션 정보를 갱신할 것인지
# False 로 해 두면 SESSION_COOKIE_AGE 에서 설정한 시간을 넘어가게 되면 무조건 세션은 사라짐

# localfiles 조회에서 사용됨
# NIFI_RESULT_DIRECTORY='/home/centos/NIFI_RESULT'

# 배치 서버에서 모델 적용에서 사용됨
ANALYTICS_MANAGER_NFS='/ANALYTICS_MANAGER_NFS/batchServer'

# 로그 레벨: DEBUG < INFO < WARNING < ERROR < CRITICAL
LOGGING = {
    'version':1,
    'disable_existing_loggers':False,
    
    'formatters': {
        'format1': {
            'format': '[%(asctime)s | %(levelname)s] %(module)s(%(lineno)sline) - %(name)s : %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
            },
        'format2': {
            'format': '[%(asctime)s %(levelname)s] %(name)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
            }
        },

    'handlers': {
        'main_console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'format2',
        },
        'sub_console':{
            'level':'WARNING',
            'class':'logging.StreamHandler',
            'formatter': 'format1',
        },
        'file': {
            # maxBytes * backupCount 용량 이상의 로그가 쌓일경우, 오래된 것부터 삭제
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'result/log/logfile.log'), # 로그 저장할 파일명
            'maxBytes': 1024 * 1024 * 10,   # 로그 파일 당 10M 까지
            'backupCount': 10,              # 로그 파일을 최대 10개까지 유지
            'formatter': 'format1',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['main_console'],
            'level': 'INFO',
            'propagate': True
        },
        'collect_log_view': {'level':'DEBUG', 'handlers': ['sub_console', 'file']},
        'collect_log_helper': {'level':'DEBUG', 'handlers': ['sub_console', 'file'], 'propagate':0},
        'collect_log_task': {'level':'DEBUG', 'handlers': ['file'], 'propagate':0},
        'collect_log_utils': {'level': 'DEBUG', 'handlers': ['sub_console', 'file'], 'propagate': 0},
    }
}
